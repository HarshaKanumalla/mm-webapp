// Minimal Missing Matters System
// Core functionality with clean implementation for Firebase Functions v6.3.2

const functions = require('firebase-functions');
const admin = require('firebase-admin');
const { onValueCreated } = require('firebase-functions/v2/database');
const { onDocumentCreated } = require('firebase-functions/v2/firestore');
const { onObjectFinalized } = require('firebase-functions/v2/storage');

// Initialize Firebase
admin.initializeApp();

// Health check endpoint
exports.healthCheck = functions.https.onRequest((req, res) => {
  res.status(200).json({
    status: 'OK',
    timestamp: Date.now(),
    message: 'Missing Matters system is operational'
  });
});

// Simple WhatsApp webhook
exports.whatsappWebhook = functions.https.onRequest(async (req, res) => {
  try {
    // Just return a basic response for now
    res.status(200).send('WhatsApp webhook received successfully');
  } catch (error) {
    console.error('Error in WhatsApp webhook:', error);
    res.status(500).send('Error processing request');
  }
});

// Storage trigger (simplified)
exports.analyzeStorageImage = onObjectFinalized({
  region: 'us-central1'
}, async (event) => {
  try {
    console.log('Storage event received', event.data.name);
    return { success: true };
  } catch (error) {
    console.error('Error processing storage event:', error);
    return { success: false, error: error.message };
  }
});

// Realtime Database trigger (using v2 syntax)
exports.processPotentialMatchesV2 = onValueCreated({
  ref: '/lost_item_features/{referenceNumber}',
  region: 'us-central1'
}, async (event) => {
  try {
    console.log('Database event received', event.params.referenceNumber);
    return { success: true };
  } catch (error) {
    console.error('Error processing database event:', error);
    return { success: false, error: error.message };
  }
});

// Firestore trigger (using v2 syntax)
exports.processPotentialMatchesFirestore = onDocumentCreated({
  document: 'lost_item_features/{referenceNumber}',
  region: 'us-central1'
}, async (event) => {
  try {
    console.log('Firestore event received', event.params.referenceNumber);
    return { success: true };
  } catch (error) {
    console.error('Error processing Firestore event:', error);
    return { success: false, error: error.message };
  }
});

// Simple status check endpoint
exports.checkLostItemStatus = functions.https.onRequest(async (req, res) => {
  try {
    const { referenceNumber } = req.query;
    
    if (!referenceNumber) {
      return res.status(400).json({ error: 'Reference number is required' });
    }
    
    // Simple placeholder response
    return res.status(200).json({
      referenceNumber,
      status: 'PENDING',
      message: 'Status check feature will be implemented in the next phase'
    });
  } catch (error) {
    console.error('Error checking status:', error);
    return res.status(500).json({ error: 'Server error' });
  }
});

// Export all functions
module.exports = {
  healthCheck: exports.healthCheck,
  whatsappWebhook: exports.whatsappWebhook,
  analyzeStorageImage: exports.analyzeStorageImage,
  processPotentialMatchesV2: exports.processPotentialMatchesV2,
  processPotentialMatchesFirestore: exports.processPotentialMatchesFirestore,
  checkLostItemStatus: exports.checkLostItemStatus
};